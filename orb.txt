void detectAndMatchFeatures(const cv::Mat& img1, const cv::Mat& img2,
                            std::vector<cv::Point2f>& srcPoints, std::vector<cv::Point2f>& dstPoints) {
    // Create ORB detector
    cv::Ptr<cv::ORB> orb = cv::ORB::create(2000);  // Increased number of features for better detection
    std::vector<cv::KeyPoint> keypoints1, keypoints2;
    cv::Mat descriptors1, descriptors2;

    // Detect keypoints and compute descriptors for both images
    orb->detectAndCompute(img1, cv::noArray(), keypoints1, descriptors1);
    orb->detectAndCompute(img2, cv::noArray(), keypoints2, descriptors2);

    // Visualize the keypoints on both images
    cv::Mat img1_keypoints, img2_keypoints;
    cv::drawKeypoints(img1, keypoints1, img1_keypoints, cv::Scalar::all(-1), cv::DrawMatchesFlags::DEFAULT);
    cv::drawKeypoints(img2, keypoints2, img2_keypoints, cv::Scalar::all(-1), cv::DrawMatchesFlags::DEFAULT);

    // Display the keypoints
    cv::imshow("Map Keypoints (img1)", img1_keypoints);
    cv::imshow("Laser Scan Keypoints (img2)", img2_keypoints);
    cv::waitKey(1);  // Pause for visualization

    // Perform feature matching
    cv::BFMatcher matcher(cv::NORM_HAMMING);
    std::vector<cv::DMatch> matches;
    matcher.match(descriptors1, descriptors2, matches);

    // Sort matches based on distance (lower distance means better match)
    std::sort(matches.begin(), matches.end(), [](const cv::DMatch& a, const cv::DMatch& b) {
        return a.distance < b.distance;
    });

    // Determine the number of top matches to keep (15% of total matches)
    size_t numGoodMatches = static_cast<size_t>(matches.size() * 0.15);

    // Keep only the best matches (top 15%)
    std::vector<cv::DMatch> goodMatches(matches.begin(), matches.begin() + numGoodMatches);

    // Populate srcPoints and dstPoints with the best matches
    for (const auto& match : goodMatches) {
        srcPoints.push_back(keypoints1[match.queryIdx].pt);
        dstPoints.push_back(keypoints2[match.trainIdx].pt);
    }

    // (Optional) Visualize matches
    cv::Mat img_matches;
    cv::drawMatches(img1, keypoints1, img2, keypoints2, goodMatches, img_matches);
    cv::imshow("Feature Matches", img_matches);
    cv::waitKey(1);  // Pause for visualization
}//////////////////////////////////////////////
